SMP
===

On KVX, 5 clusters are organized as groups of 16 processors + 1
secure core (RM) for each cluster. These 17 processors are L1$ coherent
for TCM (tightly Coupled Memory). A mixed hw/sw L2$ is present to have
cache coherency on DDR as well as TCM.
The RM manager is not meant to run Linux so, 16 processors are available
for SMP.

Booting
=======

When booting the KVX processor, only the RM is woken up. This RM should be
executing a firmware handling L2 cache requests if L2 coherency is needed
(only required on real hardware: simulators are already coherent).
Execution of this firmware is let to the lower-levels of the boot chain.
The generated vmlinux should thus be booted directly on PE0 and L2 cache
driver will then bind to the L2 firmware interface if compatible is exposed
in the devicetree.

When PE0 enables L2 coherency, all requests will be stalled until L2 firmware
answers them.

Locking primitives
==================

spinlock/rwlock are using the kernel standard queued spinlock/rwlocks.
These primitives are based on cmpxch and xchg. More particularly, it uses xchg16
which is implemented as a read modify write with acswap on 32 bit word since
kvx does not have cmpxchg for size < 32bits.

IPI
===

An IPI controller allows to communicate between CPUs using a simple
memory mapped register. This register can simply be written using a mask to
trigger interrupts directly to the cores matching the mask.

