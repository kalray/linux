kvx Core Implementation
=======================

This documents will try to explain any architecture choice for the kvx
linux port.

Regarding the peripheral, we MUST use device tree to describe ALL
peripherals. The bindings should always start with "kalray,kvx" for all
core related peripherals (watchdog, timer, etc)

System Architecture
===================

On kvx, we have 4 levels of privilege level starting from 0 (most
privileged one) to 3 (less privilege one). A system of owners allows
to delegate ownership of resources by using specials system registers.

The 2 main software stacks for Linux Kernel are the following:

+-------------+       +-------------+
| PL0: Debug  |       | PL0: Debug  |
+-------------+       +-------------+
| PL1: Linux  |       | PL1: HyperV |
+-------------+       +-------------+
| PL2: User   |       | PL2: Linux  |
+-------------+       +-------------+
|             |       | PL3: User   |
+-------------+       +-------------+

In both cases, the kvx support for privileges has been designed using
only relative PL and thus should work on both configurations without
any modifications.

When booting, the CPU is executing in PL0 and owns all the privileges.
This level is almost dedicated to the debug routines for the debugguer.
It only needs to own few privileges (breakpoint 0 and watchpoint 0) to
be able to debug a system executing in PL1 to PL3.
Debug routines are not always there for instance when the kernel is
executing alone (booted from flash).
In order to ease the load of debug routines, software convention is to
jump directly to PL1 and let PL0 for the debug.
When the kernel boots, it checks if the current privilege level is 0
($ps.pl is the only absolute value). If so, then it will delegate
almost all resources to PL1 and use a RFE to lower its execution
privilege level (see asm_delegate_pl in head.S).
If the current PL is already different from 0, then it means somebody
is above us and we need to request resource to inform it we need them. It will
then either delegate them to us directly or virtualize the delegation.
All privileges levels have their set of banked registers (ps, ea, sps,
sr, etc) which contain privilege level specific values.
$sr (system reserved) is banked and will hold the current task_struct.
This register is reserved and should not be touched by any other code.
For more information, refer to the kvx system level architecture manual.

Boot
====

On kvx, the RM (Secure Core) of Cluster 0 will boot first. It will then be able
to boot a firmware. This firmware is stored in the rm_firmware section.
The first argument ($r0) of this firmware will be a pointer to a function with
the following prototype: void firmware_init_done(uint64_t features). This
function is responsible of describing the features supported by the firmware and
will start the first PE after that.
By default, the rm_firmware function act as the "default" firmware. This
function does nothing except calling firmware_init_done and then goes to sleep.
In order to add another firmware, the rm_firmware section is patched using
objcopy. The content of this section is then replaced by the provided firmware.
This firmware will do an init and then call firmware_init_done before running
the main loop.
When the PE boots, it will check for the firmware features to enable or disable
specific core features (L2$ for instance).

When entering the C (kvx_lowlevel_start) the kernel will look for a special
magic in $r0 (0x494C314B). This magic tells the kernel if there is arguments
passed by a bootloader.
Currently, the following values are passed through registers:
 - r1: pointer to command line setup by bootloader
 - r2: device tree

If this magic is not set, then, the command line will be the one
provided in the device tree (see bootargs). The default device tree is
not builtin but will be patched by the runner used (simulator or jtag) in the
dtb section.

A default stdout-path is desirable to allow early printk.

Boot Memory Allocator
=====================

The boot memory allocator is used to allocate memory before paging is enabled.
It is initialized with DDR and also with the shared memory. This first one is
initialized during the setup_bootmem() and the second one when calling
early_init_fdt_scan_reserved_mem().


Virtual and physical memory
===========================

The mapping used and the memory management is described in
Documentation/kvx/kvx-mmu.txt.
Our Kernel is compiled using virtual addresses that starts at
0xffffff0000000000. But when it is started the kernel uses physical addresses.
Before calling the first function arch_low_level_start() we configure 2 entries
of the LTLB.

The first entry will map the first 1G of virtual address space to the first
1G of DDR:
  - TLB[0]: 0xffffff0000000000 -> 0x100000000 (size 512Mo)

The second entry will be a flat mapping of the first 512 Ko of the SMEM. It
is required to have this flat mapping because there is still code located at
this address that needs to be executed:
  - TLB[1]: 0x0 -> 0x0 (size 512Ko)

Once virtual space reached the second entry is removed.

To be able to set breakpoints when MMU is enabled we added a label called
gdb_mmu_enabled. If you try to set a breakpoint on a function that is in
virtual memory before the activation of the MMU this address as no signification
for GDB. So, for example, if you want to break on the function start_kernel()
you will need to run:

	kvx-gdb -silent path_to/vmlinux \
		-ex 'tbreak gdb_mmu_enabled' -ex 'run' \
		-ex 'break start_kernel' \
		-ex 'continue'

We will also add an option to kvx-gdb to simplify this step.

Timers
======

The free-runinng clock (clocksource) is based on the DSU. This clock is
not interruptible and never stops even if core go into idle.

Regarding the tick (clockevent), we use the timer 0 available on the core.
This timer allows to set a periodic tick which will be used as the main
tick for each core. Note that this clock is percpu.

get_cycles implementation is based on performance counter. One of them
is used to count cycles. Note that since this is used only when the core
is running, there is no need to worry about core sleeping (which will
stop the cycle counter)

Context switching
=================

context switching is done in entry.S. When spawning a fresh thread,
copy_thread is called. During this call, we setup callee saved register
r20 and r21 to special values containing the function to call.

The normal path for a kernel thread will be the following:

 1 - Enter copy_thread_tls and setup callee saved registers which will
     be restored in __switch_to.
 2 - set r20 and r21 (in thread_struct) to function and argument and
     ra to ret_from_kernel_thread.
     These callee saved will be restored in switch_to.
 3 - Call _switch_to at some point.
 4 - Save all callee saved register since switch_to is seen as a
     standard function call by the caller.
 5 - Change stack pointer to the new stack
 6 - At the end of switch to, set sr0 to the new task and use ret to
     jump to ret_from_kernel_thread (address restored from ra).
 7 - In ret_from_kernel_thread, execute the function with arguments by
     using r20, r21 and we are done

For more explanation, you can refer to https://lwn.net/Articles/520227/

User thread creation
====================

We are using almost the same path as copy_thread to create it.
The detailed path is the following:

 1 - Call start_thread which will setup user pc and stack pointer in
     task regs. We also set sps and clear privilege mode bit.
     When returning from exception, it will "flip" to user mode.
 2 - Enter copy_thread_tls and setup callee saved registers which will
     be restored in __switch_to. Also, set the "return" function to be
     ret_from_fork which will be called at end of switch_to
 3 - set r20 (in thread_struct) with tracing information.
     (simply by lazyness to avoid computing it in assembly...)
 4 - Call _switch_to at some point.
 5 - The current pc will then be restored to be ret_from fork.
 6 - Ret from fork calls schedule_tail and then check if tracing is
     enabled. If so call syscall_trace_exit
 7 - finally, instead of returning to kernel, we restore all registers
     that have been setup by start_thread by restoring regs stored on
     stack

L2$ handling
============

On kvx, the L2$ is handled by a firmware running on the RM. This firmware needs
various information to be aware of its configuration and communicate with the
kernel. In order to do that, when firmware is starting, the device tree is given
as parameter along with the "registers" zone. This zone is simply a memory area
where data are exchanged between kernel <-> L2$. When some commands are written
to it, the kernel sends an interrupt using a mailbox.
If the L2$ node is not present in the device tree, then, the RM will directly go
into sleeping.

Boot diagram:

           RM                       PE 0
                          +
       +---------+        |
       |  Boot   |        |
       +----+----+        |
            |             |
            v             |
      +-----+-----+       |
      |  Prepare  |       |
      | L2 shared |       |
      |  memory   |       |
      |(registers)|       |
      +-----+-----+       |
            |             |      +-----------+
            +------------------->+   Boot    |
            |             |      +-----+-----+
            v             |            |
   +--------+---------+   |            |
   | L2 firmware      |   |            |
   | parameters:      |   |            |
   | r0 = registers   |   |            |
   | r1 = DTB         |   |            |
   +--------+---------+   |            |
            |             |            |
            v             |            |
    +-------+--------+    |     +------+------+
    |  L2 firmware   |    |     | Wait for L2 |
    |   execution    |    |     | to be ready |
    +-------+--------+    |     +------+------+
            |             |            |
     +------v-------+     |            v
     | L2 requests  |     |     +------+------+
+--->+   handling   |     |     |   Enable    |
|    +-------+------+     |     | L2 caching  |
|            |            |     +------+------+
|            |            |            |
+------------+            +            v


Since this driver is started early (before SMP boot), A lot of drivers are not
yet probed (mailboxes, iommu, etc) and thus can not be used.

Building
========

In order to build the kernel, you will need a complete kvx toolchain.
First, setup the config using the following command line

$ make ARCH=kvx O=your_directory default_defconfig

Adjust any configuration option you may need and then, build the kernel:

$ make ARCH=kvx O=your_directory -j12

You will finally have a vmlinux image ready to be run.

$ kvx-mppa -- vmlinux

Additionally, you may want to debug it. To do so, use kvx-gdb:

$ kvx-gdb vmlinux


